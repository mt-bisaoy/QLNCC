let isEditingSupplier = false;
let editingSupplierId = null;


let suppliers = []; //
fetch('http://localhost:3000/api/suppliers')
  .then(res => res.json())
  .then(data => {
    console.log('Danh s√°ch nh√† cung c·∫•p:', data);
    // Sau ƒë√≥ render ra b·∫£ng giao di·ªán
  });
 
  
  async function fetchSuppliers() {
    const response = await fetch('http://localhost:3000/api/suppliers');
    const data = await response.json();
  
    suppliers = data; // ‚úÖ G√°n l·∫°i bi·∫øn to√†n c·ª•c
  
    const supplierList = document.getElementById('suppliers-body');
    supplierList.innerHTML = '';
  
    data.forEach(supplier => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${supplier.MANCC}</td>
        <td>${supplier.TENNCC}</td>
        <td>${supplier.DIACHI}</td>
        <td>${supplier.SDT}</td>
        <td>${supplier.EMAIL}</td>
        <td class="action-icons">
          <i class="fas fa-eye" onclick="showSupplierDetailModal('${supplier.MANCC}')"></i>
          <i class="fas fa-pen" onclick="showEditSupplierModal('${supplier.MANCC}')"></i>
          <i class="fas fa-trash" onclick="deleteSupplier('${supplier.MANCC}')"></i>
        </td>
      `;
      supplierList.appendChild(row);
    });
  }
  
  
window.onload = fetchSuppliers; // G·ªçi h√†m khi trang ƒë∆∞·ª£c t·∫£i
document.addEventListener("DOMContentLoaded", fetchSuppliers);

// ===== PH·∫¶N CHUNG: ƒêƒÉng nh·∫≠p, giao di·ªán, reset m·∫≠t kh·∫©u =====

function updateUsernameDisplays() {
  const username = localStorage.getItem("savedUsername") || "ng∆∞·ªùi d√πng"
  const displays = document.querySelectorAll("[id^='username-display']")

  displays.forEach((display) => {
    display.textContent = username
  })
}
window.addEventListener("DOMContentLoaded", () => {
  // ch·∫∑n zoom b·∫±ng Ctrl + cu·ªôn chu·ªôt
  document.addEventListener(
    "wheel",
    (e) => {
      if (e.ctrlKey) {
        e.preventDefault()
      }
    },
    { passive: false },
  )

  // ch·∫∑n Ctrl + + / - / =
  document.addEventListener("keydown", (e) => {
    if ((e.ctrlKey || e.metaKey) && (e.key === "+" || e.key === "-" || e.key === "=")) {
      e.preventDefault()
    }
  })

  // Initialize sidebar toggles for all sections
  initializeSidebarToggles()

  // Update username displays in all sections
  updateUsernameDisplays()

  // Set up forgot password link
  const forgotLink = document.getElementById("forgot-link")
  if (forgotLink) {
    forgotLink.addEventListener("click", (e) => {
      e.preventDefault()
      document.querySelector(".login-box").style.display = "none"
      document.querySelector(".reset-box").style.display = "flex"
    })
  }

  // Set up code input handling for verification
  setupCodeInputs()

  // Set up search input handling for Enter key
  setupSearchInputs()
})

function setupSearchInputs() {
  // Thi·∫øt l·∫≠p x·ª≠ l√Ω ph√≠m Enter cho c√°c √¥ t√¨m ki·∫øm
  const searchInputs = [
    { id: "searchInput", handler: filterMaterials },
    { id: "searchSupplierInput", handler: filterSuppliers },
    { id: "searchOrderInput", handler: filterOrders },
    { id: "searchWarehouseInput", handler: filterWarehouse },
  ]

  searchInputs.forEach(({ id, handler }) => {
    const input = document.getElementById(id)
    if (input) {
      input.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          e.preventDefault()
          handler()
        }
      })
    }
  })
}

function setupCodeInputs() {
  const verifyBox = document.querySelector(".verify-box")
  if (verifyBox) {
    const inputs = verifyBox.querySelectorAll(".code-box")
    if (inputs.length > 0) {
      inputs.forEach((input, index) => {
        input.addEventListener("input", (e) => {
          const val = e.target.value
          if (!/^\d$/.test(val)) {
            e.target.value = "" // Ch·ªâ nh·∫≠n s·ªë
          } else if (index < inputs.length - 1) {
            inputs[index + 1].focus() // T·ª± ƒë·ªông focus √¥ ti·∫øp theo
          }
        })

        input.addEventListener("keydown", (e) => {
          if (e.key === "ArrowRight" && index < inputs.length - 1) {
            inputs[index + 1].focus()
          }
          if (e.key === "ArrowLeft" && index > 0) {
            inputs[index - 1].focus()
          }
          if (e.key === "Backspace" && !e.target.value && index > 0) {
            inputs[index - 1].focus()
          }
          if (e.key === "Enter") {
            document.querySelector(".verify-btn").click()
          }
        })
      })
    }
  }
}
function initializeSidebarToggles() {
  const toggleButtons = document.querySelectorAll(".sidebar-toggle")
  toggleButtons.forEach((button) => {
    button.addEventListener("click", function () {
      const buttonId = this.id;
      const sectionId = this.id.replace("sidebar-toggle-", "")
      const sidebar = document.getElementById(sectionId ? `sidebar-${sectionId}` : "sidebar")
      const sidebarId = `sidebar-${sectionId}`;
      if (sidebar) {
                // Toggle class 'collapsed' tr√™n ƒê√öNG sidebar n√†y
                sidebar.classList.toggle("collapsed");

                // Toggle icon tr√™n ƒê√öNG n√∫t b·∫•m n√†y
                const icon = this.querySelector("i");
                if (icon) {
                    icon.classList.toggle("fa-bars");
                    icon.classList.toggle("fa-chevron-right");
                }

                // X·ª≠ l√Ω cho mobile n·∫øu c·∫ßn (toggle class 'active' ƒë·ªÉ hi·ªán/·∫©n overlay)
                if (window.innerWidth <= 768) {
                    sidebar.classList.toggle("active");
                }
            } else {
                console.error(`Sidebar v·ªõi ID "${sidebarId}" kh√¥ng t√¨m th·∫•y cho n√∫t "${buttonId}"`);
            }
        });
  })
  // ‚úÖ ƒê·∫∑t autoCollapseSidebar b√™n trong initializeSidebarToggles
  function autoCollapseSidebar() {
    const sidebar = document.querySelector(".sidebar");
    if (!sidebar) return;
  
    if (window.innerWidth < 768) {
      sidebar.classList.add("collapsed");
    } else {
      sidebar.classList.remove("collapsed");
    }
  }
  

  // G·ªçi ngay khi kh·ªüi ƒë·ªông
  autoCollapseSidebar()

  // G·ªçi khi resize

window.addEventListener("resize", autoCollapseSidebar)
autoCollapseSidebar() // G·ªçi l·∫ßn ƒë·∫ßu khi t·∫£i trang

}


function login() {
  const username = document.getElementById("username").value.trim()
  const password = document.getElementById("password").value.trim()
  const remember = document.getElementById("remember").checked
  const errorDiv = document.getElementById("login-error")

  // Ki·ªÉm tra n·∫øu thi·∫øu t√™n ho·∫∑c m·∫≠t kh·∫©u
  if (!username || !password) {
    errorDiv.textContent = "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u!"
    errorDiv.style.display = "block"
    return
  }
  // Ki·ªÉm tra t√†i kho·∫£n
  if (username === "admin" && password === "123456") {
    localStorage.setItem("savedUsername", username) // ‚úÖ l∆∞u l·∫°i t√™n
    if (remember) {
      localStorage.setItem("savedPassword", password)
    } else {
      localStorage.removeItem("savedPassword")
    }
    navigateTo("home")
  
    console.log("Login successful, sidebar should show");
  } else {
    errorDiv.innerText = "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!"
    errorDiv.style.display = "block"
  }
}


function backToLogin() {
  // ·∫®n c√°c box c√≤n l·∫°i
  document.querySelector(".reset-box").style.display = "none";
  document.querySelector(".verify-box").style.display = "none";

  // Hi·ªán l·∫°i box ƒëƒÉng nh·∫≠p
  const loginBox = document.querySelector(".login-box");
  loginBox.style.display = "flex";

  // Reset l·∫°i n·ªôi dung v√† v·ªã tr√≠ input
  document.getElementById("username").value = "";
  document.getElementById("password").value = "";

  document.getElementById("reset-email").value = "";
  document.getElementById("reset-feedback").style.display = "none";
  document.getElementById("reset-error").style.display = "none"

  // C·ªë ƒë·ªãnh l·∫°i v·ªã tr√≠ n·∫øu c·∫ßn (n·∫øu layout b·ªã l·ªách)
  loginBox.style.top = "55%";
  loginBox.style.right = "8%";
  loginBox.style.transform = "translateY(-50%)";
  document.getElementById('username').value = '';
document.getElementById('password').value = '';
const errorMessage = document.querySelector('.error-message');
if (errorMessage) errorMessage.remove();

}
function sendReset() {
  const email = document.getElementById("reset-email").value.trim()
  const feedback = document.getElementById("reset-error")

  if (!email) {
    feedback.innerText = "Vui l√≤ng nh·∫≠p email!"
    feedback.style.display = "block"
    return
  }

  feedback.style.display = "none"

  // üëâ G√°n m√£ x√°c th·ª±c gi·∫£ ƒë·ªãnh
  const code = "123456"
  localStorage.setItem("verificationCode", code) // L∆∞u v√†o localStorage

  // Chuy·ªÉn sang giao di·ªán x√°c nh·∫≠n
  document.querySelector(".reset-box").style.display = "none"
  document.querySelector(".verify-box").style.display = "flex"

  const desc = document.getElementById("verify-desc")
  desc.innerHTML = `M·ªôt m√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ƒë·ªãa ch·ªâ email <strong style="color:#00e1ff">${email}</strong>. Vui l√≤ng nh·∫≠p m√£ v√†o √¥ b√™n d∆∞·ªõi.`

  // Focus v√†o √¥ ƒë·∫ßu ti√™n
  setTimeout(() => {
    const inputs = document.querySelectorAll(".code-box")
    if (inputs.length > 0) {
      inputs[0].focus()
    }
  }, 100)
}

function backToReset() {
  document.querySelector(".verify-box").style.display = "none"
  document.querySelector(".reset-box").style.display = "flex"
}

function verifyCode() {
  const code = Array.from(document.querySelectorAll(".code-box"))
    .map((input) => input.value)
    .join("")
  if (code === "123456") {
    document.querySelector(".verify-box").style.display = "none"
    document.querySelector(".newpass-box").style.display = "flex" // hi·ªán b·∫£ng m·ªõi
  } else {
    alert("M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng!")
  }
}

function submitNewPassword() {
  const newPass = document.getElementById("new-password").value.trim()
  const confirmPass = document.getElementById("confirm-password").value.trim()

  if (!newPass || !confirmPass) {
    alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u!")
    return
  }

  if (newPass !== confirmPass) {
    alert("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
    return
  }

  // ‚úÖ L∆∞u m·∫≠t kh·∫©u n·∫øu mu·ªën (tu·ª≥ ch·ªçn)
  localStorage.setItem("savedPassword", newPass) // ho·∫∑c l∆∞u v√†o session/local

  document.querySelector(".newpass-box").style.display = "none"
  document.querySelector(".login-box").style.display = "flex"

  // ‚úÖ ƒê·∫∑t ƒëo·∫°n n√†y ·ªü ƒë√¢y
  const errorDiv = document.getElementById("login-error")
  if (errorDiv) errorDiv.style.display = "none"

  alert("M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
  // Focus l·∫°i v√†o √¥ t√™n ƒëƒÉng nh·∫≠p
  document.getElementById("username").focus()
}

function logout() {
  localStorage.removeItem("savedUsername")
  localStorage.removeItem("savedPassword")
  navigateTo("login")
}
/*document.addEventListener("DOMContentLoaded", () => {
  const currentPath = window.location.pathname;
  const menuLinks = document.querySelectorAll(".sidebar ul li a");

  menuLinks.forEach(link => {
    if (link.href.includes(currentPath)) {
      link.classList.add("active");
    }
  });
});*/
// ===== PH·∫¶N V·∫¨T T∆Ø: Qu·∫£n l√Ω v·∫≠t t∆∞ =====

// --- materials page ---
let currentEditingIndex = null; // Ch·ªâ s·ªë c·ªßa v·∫≠t t∆∞ ƒëang ch·ªânh s·ª≠a

const API_MATERIAL = "http://localhost:3000/api/material"
async function fetchMaterials() {
  const res = await fetch(API_MATERIAL)
  const data = await res.json()
  console.log("D·ªØ li·ªáu v·∫≠t t∆∞:", data)  // Debugging: Ki·ªÉm tra d·ªØ li·ªáu
  material = data; 
  const tbody = document.getElementById('materials-body')
  tbody.innerHTML = ''  // Clear previous rows
  data.forEach((item) => {
    const tr = document.createElement('tr')
    tr.innerHTML = `
      <td>${item.MAVT}</td>
      <td>${item.TENVT}</td>
      <td>${item.DONVI}</td>
      <td>${item.DONGIA}</td>
      <td class="action-icons">
        <i class="fas fa-eye" onclick="showMaterialDetail('${item.MAVT}')"></i>
        <i class="fas fa-pen" onclick="showEditModal('${item.MAVT}')"></i>
        <i class="fas fa-trash" onclick="deleteMaterial('${item.MAVT}')"></i>
      </td>
    `
    tbody.appendChild(tr)
  })
  populateMaterialSelect(); // ‚úÖ g·ªçi ·ªü ƒë√¢y
}
document.addEventListener("DOMContentLoaded", () => {
  fetchMaterials();
});
async function showMaterialDetail(mavt) {
  const mat = material.find(m => m.MAVT === mavt);
  if (!mat) return alert("Kh√¥ng t√¨m th·∫•y v·∫≠t t∆∞!");

  document.getElementById("modal-title").textContent = "Chi ti·∫øt v·∫≠t t∆∞";

  await populateSupplierAndWarehouseSelect(mat.MANCC, mat.MAKH);

  document.getElementById("MAVT").value = mat.MAVT;
  document.getElementById("TENVT").value = mat.TENVT;
  document.getElementById("MOTA").value = mat.MOTA;
  document.getElementById("DONVI").value = mat.DONVI;
  document.getElementById("DONGIA").value = mat.DONGIA;
  document.getElementById("MANCC").value = mat.MANCC;
  document.getElementById("MAKH").value = mat.MAKH;

  // Kh√≥a input
  document.querySelectorAll('#modal input, #modal select').forEach(el => el.setAttribute('disabled', true));

  // ·∫®n n√∫t l∆∞u
  document.getElementById("save-btn").style.display = "none";

  document.getElementById("modal").style.display = "block";
}


async function showEditModal(mavt) {
  const mat = material.find(m => m.MAVT === mavt);
  if (!mat) return alert("Kh√¥ng t√¨m th·∫•y v·∫≠t t∆∞!");

  document.getElementById("modal-title").textContent = "Ch·ªânh s·ª≠a v·∫≠t t∆∞";

  await populateSupplierAndWarehouseSelect(mat.MANCC, mat.MAKH);

  document.getElementById("MAVT").value = mat.MAVT;
  document.getElementById("TENVT").value = mat.TENVT;
  document.getElementById("MOTA").value = mat.MOTA;
  document.getElementById("DONVI").value = mat.DONVI;
  document.getElementById("DONGIA").value = mat.DONGIA;
  document.getElementById("MANCC").value = mat.MANCC;
  document.getElementById("MAKH").value = mat.MAKH;

  // M·ªü kh√≥a ƒë·ªÉ s·ª≠a
  document.querySelectorAll('#modal input, #modal select').forEach(el => el.removeAttribute('disabled'));
  document.getElementById("MAVT").setAttribute("readonly", true); // Kh√¥ng s·ª≠a m√£

  // Hi·ªán n√∫t l∆∞u
  document.getElementById("save-btn").style.display = "inline-block";

  document.getElementById("modal").style.display = "block";
}




function closeDetailModal() {
  document.getElementById('detail-modal').style.display = 'none';
}
function renderMaterials() {
  const tbody = document.querySelector("#materials-table tbody");
  if (!tbody) return;

  tbody.innerHTML = "";  // X√≥a b·∫£ng hi·ªán t·∫°i

  material.forEach((material) => {
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td>${material.MAVT}</td>
      <td>${material.TENVT}</td>
      <td>${material.DONVI}</td>
      <td>${material.DONGIA}</td>
      <td>
        <button onclick="showEditModal('${material.MAVT}')">‚úèÔ∏è</button>
        <button onclick="deleteMaterial('${material.MAVT}')">üóëÔ∏è</button>
      </td>
    `;
    tbody.appendChild(tr);
  });
}

async function deleteMaterial(mavt) {
  if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a v·∫≠t t∆∞ ${mavt}?`)) return;

  try {
   const res = await fetch(`http://localhost:3000/api/material/${mavt}`, { method: "DELETE" });
if (!res.ok) throw new Error("L·ªói khi x√≥a v·∫≠t t∆∞");

    // X√≥a kh·ªèi local array
    const index = material.findIndex(m => m.MAVT === mavt);
    if (index !== -1) material.splice(index, 1);

    // X√≥a d√≤ng t∆∞∆°ng ·ª©ng tr√™n DOM
    const rows = document.querySelectorAll("#materials-table tbody tr");
    for (let row of rows) {
      if (row.children[0].textContent === mavt) {
        row.remove();
        break;
      }
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a v·∫≠t t∆∞:", err);
    alert("X√≥a v·∫≠t t∆∞ th·∫•t b·∫°i.");
  }
}


function showAddModal() {
  document.getElementById("modal-title").textContent = "Th√™m v·∫≠t t∆∞"
  document.getElementById("MAVT").value = ""
  document.getElementById("MOTA").value = ""
  document.getElementById("DONVI").value = ""
  document.getElementById("DONGIA").value = ""
  document.getElementById("MAVT").readOnly = false
  editingIndex = null
  document.getElementById("modal").style.display = "block"
  populateSupplierAndWarehouseSelect()

}


// Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa MAVT
function isMaterialExist(mavt) {
  return material.some(material => material.MAVT === mavt);
}
function updateMaterialRow(mat) {
  const rows = document.querySelectorAll("#materials-table tbody tr");
  for (let row of rows) {
    if (row.children[0].textContent === mat.MAVT) {
      row.children[1].textContent = mat.TENVT;
      row.children[2].textContent = mat.DONVI;
      row.children[3].textContent = mat.DONGIA;
      break;
    }
  }
}

async function saveMaterial() {
  const mavt = document.getElementById("MAVT").value.trim();
  const tenvt = document.getElementById("TENVT").value.trim();
  const mota = document.getElementById("MOTA").value.trim();
  const donvi = document.getElementById("DONVI").value.trim();
  const dongia = parseFloat(document.getElementById("DONGIA").value);
  const mancc = document.getElementById("MANCC").value;
  const makh = document.getElementById("MAKH").value;

  if (!mavt || !tenvt || !donvi || isNaN(dongia)) {
    alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin h·ª£p l·ªá!");
    return;
  }

  const payload = {
    MAVT: mavt,
    TENVT: tenvt,
    MOTA: mota,
    DONVI: donvi,
    DONGIA: dongia,
    MANCC: mancc,
    MAKH: makh,
  };

  try {
    let method = "POST";
    let url = "http://localhost:3000/api/material";

    if (isMaterialExist(mavt)) {
      method = "PUT";
      url = `http://localhost:3000/api/material/${mavt}`;
    }

    const res = await fetch(url, {
      method,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (!res.ok) {
      const error = await res.text();
      throw new Error(error);
    }

    const message = await res.text();
    alert(message);

    await fetchMaterials(); // load l·∫°i b·∫£ng v·∫≠t t∆∞
    closeModal();           // ƒë√≥ng modal
  } catch (err) {
    console.error("‚ùå L·ªói khi l∆∞u v·∫≠t t∆∞:", err);
    alert("Kh√¥ng th·ªÉ l∆∞u v·∫≠t t∆∞. Vui l√≤ng ki·ªÉm tra l·∫°i!");
  }
}



async function populateSupplierAndWarehouseSelect(selectedNCC = "", selectedKH = "") {
  const supplierSelect = document.getElementById("MANCC");
  const warehouseSelect = document.getElementById("MAKH");

  const resSup = await fetch("http://localhost:3000/api/suppliers");
  const suppliers = await resSup.json();
  supplierSelect.innerHTML = '<option value="">-- Ch·ªçn nh√† cung c·∫•p --</option>';
  suppliers.forEach(s => {
    supplierSelect.innerHTML += `<option value="${s.MANCC}" ${s.MANCC === selectedNCC ? "selected" : ""}>${s.MANCC} - ${s.TENNCC}</option>`;
  });

  const resKho = await fetch("http://localhost:3000/api/warehouse");
  const warehouses = await resKho.json();
  warehouseSelect.innerHTML = '<option value="">-- Ch·ªçn kho h√†ng --</option>';
  warehouses.forEach(k => {
    warehouseSelect.innerHTML += `<option value="${k.MAKH}" ${k.MAKH === selectedKH ? "selected" : ""}>${k.MAKH} - ${k.VITRI}</option>`;
  });
}





function closeModal() {
  document.getElementById("modal").style.display = "none"
}

function renderTable() {
  material = data; // ‚Üê 
  const tbody = document.getElementById('materials-body');
  tbody.innerHTML = '';
  data.forEach((item) => {
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${item.MAVT}</td>
      <td>${item.TENVT}</td>
      <td>${item.DONVI}</td>
      <td>${item.DONGIA}</td>
      <td class="action-icons">
        <i class="fas fa-eye" onclick="showMaterialDetail('${item.MAVT}')"></i>
        <i class="fas fa-pen" onclick="showEditModal('${item.MAVT}')"></i>
        <i class="fas fa-trash" onclick="deleteMaterial('${item.MAVT}')"></i>
      </td>
    `;
    tbody.appendChild(tr);
  });
}

function filterMaterials() {
  const keyword = document.getElementById("searchInput").value.toLowerCase()
  const rows = document.querySelectorAll("#materials-body tr")

  rows.forEach((row) => {
    const text = row.textContent.toLowerCase()
    row.style.display = text.includes(keyword) ? "" : "none"
  })
}

function formatCurrency(number) {
  return Number.parseInt(number).toLocaleString("vi-VN") + "ƒë"
}
function closeEditModal() {
  document.getElementById("edit-modal").style.display = "none";
}
function closeDetailModal() {
  document.getElementById("detail-modal").style.display = "none";
}

// ===== PH·∫¶N ƒê∆†N H√ÄNG: Qu·∫£n l√Ω ƒë∆°n h√†ng =====
// D·ªØ li·ªáu m·∫´u cho ƒë∆°n h√†ng
let orders = [];

let editingOrderId = null;
editingOrderId = MADH;

let selectedMaterial = [];

const API_URL = "http://localhost:3000/api/order"
// L·∫•y danh s√°ch ƒë∆°n h√†ng t·ª´ backend
async function fetchOrders() {
  try {
    const res = await fetch(API_URL)
    const data = await res.json()
    orders = data
    renderOrders()
  } catch (err) {
    console.error("L·ªói khi l·∫•y ƒë∆°n h√†ng:", err)
  }
}


function showAddOrderModal() {
  document.getElementById("modal-order-title").textContent = "Th√™m ƒë∆°n h√†ng"
  document.getElementById("MADH").value = ""
  document.getElementById("NGAYDAT").value = ""
  document.getElementById("TRANGTHAIDH").value = "ƒêang x·ª≠ l√Ω"
  document.getElementById("TONGTIEN").value = 0
  editingOrderId = null
  document.getElementById("modal-order").style.display = "block"
}
async function showEditOrderModal(index) {
  const MADH = orders[index].MADH; // ‚úÖ FIX
  console.log("üü° M√£ ƒë∆°n h√†ng ƒëang g·ªçi API:",MADH); // üêû DEBUG
  try {
    const res = await fetch(`http://localhost:3000/api/order/detail/${MADH}`);
    const order = await res.json();

    document.getElementById("modal-order-title").textContent = "S·ª≠a ƒë∆°n h√†ng";
    document.getElementById("MADH").value = order.MADH;
    document.getElementById("NGAYDAT").value = order.NGAYDAT?.slice(0, 10);
    document.getElementById("TRANGTHAIDH").value = order.TRANGTHAIDH;
    document.getElementById("TONGTIEN").value = order.TONGTIEN;

    editingOrderId = order.MADH;
    selectedMaterial = order.items.map(item => ({
      materialCode: item.materialCode,
      quantity: item.quantity,
      price: item.price
    }));

renderSelectedMaterials();
calculateTotalPrice();
    document.getElementById("modal-order").style.display = "block";
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", err);
    alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu chi ti·∫øt.");
  }
}



function renderOrders() {
  const body = document.getElementById("orders-body");
  body.innerHTML = "";

  orders.forEach((order, index) => {
    const row = `
      <tr>
        <td>${order.MADH}</td>
        <td>${order.NGAYDAT?.slice(0, 10)}</td>
        <td>${order.TRANGTHAIDH}</td>
        <td>${formatCurrency(order.TONGTIEN)}</td>
        <td class="action-icons">
        <i class="fas fa-eye" onclick="showOrderHistory(${index})" title="Xem chi ti·∫øt"></i>
        <i class="fas fa-pen" onclick="showEditOrderModal(${index})" title="Ch·ªânh s·ª≠a"></i>
        <i class="fas fa-trash" onclick="deleteOrder('${order.MADH}')" title="Xo√°"></i>
      </td>

      </tr>
    `
    body.innerHTML += row
  });
}

function renderVatTuTable(vatTuList) {
  const tableBody = document.querySelector('#vattu-table tbody');
  tableBody.innerHTML = ''; // clear b·∫£ng c≈©

  if (!vatTuList || vatTuList.length === 0) {
    tableBody.innerHTML = '<tr><td colspan="4">Kh√¥ng c√≥ v·∫≠t t∆∞ n√†o.</td></tr>';
    return;
  }

  vatTuList.forEach(vt => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${vt.tenVatTu}</td>
      <td>${vt.donVi}</td>
      <td>${vt.soLuong}</td>
      <td>${vt.ghiChu || ''}</td>
    `;
    tableBody.appendChild(row);
  });
}
function showOrderDetail(data) {
  document.getElementById('order-detail-modal').style.display = 'flex';

  // Hi·ªÉn th·ªã c√°c th√¥ng tin c∆° b·∫£n kh√°c n·∫øu c·∫ßn...

  // Render danh s√°ch v·∫≠t t∆∞ ƒë√£ ch·ªçn
  renderVatTuTable(data.vatTuList); // M·∫£ng v·∫≠t t∆∞ c·ªßa ƒë∆°n h√†ng
}

async function showOrderHistory(index) {
  const orderId = orders[index]?.MADH;
  if (!orderId) return alert("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!");

  try {
    const res = await fetch(`http://localhost:3000/api/order/detail/${orderId}`); // ‚úÖ g·ªçi API m·ªõi
    const order = await res.json();

    createOrderDetailModal(); // t·∫°o modal n·∫øu ch∆∞a c√≥

    let totalAmount = 0;
    let itemsHtml = "";

    const items = order.items || [];

    items.forEach((item) => {
      const matchedMaterial = material?.find((m) => m.MAVT === item.materialCode); // ‚úÖ ƒê·ªïi t√™n
      const materialName = matchedMaterial ? matchedMaterial.TENVT : "Kh√¥ng x√°c ƒë·ªãnh";
      const subtotal = item.quantity * item.price;
      totalAmount += subtotal;

      itemsHtml += `
        <tr>
          <td>${item.materialCode}</td>
          <td>${materialName}</td>
          <td>${item.quantity}</td>
          <td>${formatCurrency(item.price)}</td>
          <td>${formatCurrency(subtotal)}</td>
        </tr>
      `;
    });

    const modalBody = document.getElementById("order-detail-modal-body");
    modalBody.innerHTML = `
      <p><strong>M√£ ƒë∆°n h√†ng:</strong> ${order.MADH}</p>
      <p><strong>Ng√†y ƒë·∫∑t:</strong> ${order.NGAYDAT?.slice(0, 10)}</p>
      <p><strong>Tr·∫°ng th√°i:</strong> ${order.TRANGTHAIDH}</p>
      <p><strong>T·ªïng ti·ªÅn:</strong> ${formatCurrency(order.TONGTIEN)}</p>

      <h4 style="margin-top: 10px;">Danh s√°ch v·∫≠t t∆∞:</h4>
      <div style="overflow-x: auto;">
        <table class="selected-materials-table">
          <thead>
            <tr>
              <th>M√£ v·∫≠t t∆∞</th>
              <th>T√™n v·∫≠t t∆∞</th>
              <th>S·ªë l∆∞·ª£ng</th>
              <th>ƒê∆°n gi√°</th>
              <th>Th√†nh ti·ªÅn</th>
            </tr>
          </thead>
          <tbody>
            ${itemsHtml}
          </tbody>
          <tfoot>
            <tr>
              <td colspan="4" style="text-align: right; font-weight: bold;">T·ªïng c·ªông:</td>
              <td style="font-weight: bold;">${formatCurrency(totalAmount)}</td>
            </tr>
          </tfoot>
        </table>
      </div>
    `;

    document.getElementById("order-detail-modal").style.display = "flex";
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", err);
    alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ƒë∆°n h√†ng.");
  }
}


function createOrderDetailModal() {
  const modal = document.getElementById("order-detail-modal");

  // N·∫øu modal ƒë√£ c√≥ nh∆∞ng thi·∫øu ph·∫ßn body => th√™m body v√†o
  if (modal && !document.getElementById("order-detail-modal-body")) {
    modal.innerHTML = `
      <div class="modal-content" style="max-width: 800px;">
        <div class="detail-modal-header">
          <h3 class="detail-modal-title">Chi ti·∫øt ƒë∆°n h√†ng</h3>
          <button class="detail-modal-close" onclick="closeOrderDetailModal()">√ó</button>
        </div>
        <div class="detail-modal-body" id="order-detail-modal-body">
          <!-- N·ªôi dung s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë·ªông -->
        </div>
        <div class="detail-modal-footer" style="text-align: right; margin-top: 20px;">
          <button onclick="printOrderDetail()">In ƒë∆°n h√†ng</button>
          <button onclick="closeOrderDetailModal()">ƒê√≥ng</button>
        </div>
      </div>
    `;
    return;
  }

  // N·∫øu modal ch∆∞a t·ªìn t·∫°i th√¨ t·∫°o m·ªõi ho√†n to√†n
  if (!modal) {
    const newModal = document.createElement("div");
    newModal.id = "order-detail-modal";
    newModal.className = "modal";
    newModal.style.display = "none";
    document.body.appendChild(newModal);
    createOrderDetailModal(); // g·ªçi l·∫°i ƒë·ªÉ render n·ªôi dung
  }
}


function closeOrderDetailModal() {
  const modal = document.getElementById("order-detail-modal")
  if (modal) {
    modal.style.display = "none"
  }
}

function printOrderDetail() {
  alert("ƒêang in ƒë∆°n h√†ng...")
}
function calculateTotalPrice() {
  let total = 0;
  for (let item of selectedMaterial) {
    if (!isNaN(item.quantity) && !isNaN(item.price)) {
      total += item.quantity * item.price;
    }
    ;
  }

  // N·∫øu c√≥ √¥ input t·ªïng ti·ªÅn:
  const totalInput = document.getElementById("TONGTIEN");
  if (totalInput) {
    totalInput.value = total.toFixed(2);
  }

  // N·∫øu hi·ªÉn th·ªã t·ªïng ti·ªÅn ·ªü m·ªôt ch·ªó kh√°c (v√≠ d·ª• trong b·∫£ng):
  const totalText = document.getElementById("displayTotal");
  if (totalText) {
    totalText.innerText = total.toLocaleString() + " ƒë";
  }
}

function addMaterialToOrder() {
  const materialSelect = document.getElementById("order-material");
  const quantityInput = document.getElementById("order-quantity");

  const materialCode = materialSelect.value;
  const quantity = Number.parseInt(quantityInput.value);

  if (!materialCode || !quantity || quantity <= 0) {
    alert("Vui l√≤ng ch·ªçn v·∫≠t t∆∞ v√† nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá");
    return;
  }

  const mat = material.find((m) => m.MAVT === materialCode); // ‚úÖ Fix
  if (!mat) {
    alert("V·∫≠t t∆∞ kh√¥ng t·ªìn t·∫°i");
    return;
  }

  const existingIndex = selectedMaterial.findIndex((item) => item.materialCode === materialCode);
  if (existingIndex >= 0) {
    selectedMaterial[existingIndex].quantity += quantity;
  } else {
    selectedMaterial.push({
      materialCode,
      quantity,
      price: mat.DONGIA,
    });
    renderSelectedMaterials(); // ‚úÖ Hi·ªÉn th·ªã l·∫°i danh s√°ch
    calculateTotalPrice();     // ‚úÖ T√≠nh l·∫°i t·ªïng ti·ªÅn
  }

  renderSelectedMaterials();

  quantityInput.value = "1";
}

function removeMaterialFromOrder(index) {
  selectedMaterial.splice(index, 1);
  renderSelectedMaterials();   // ‚úÖ c·∫≠p nh·∫≠t hi·ªÉn th·ªã
  calculateTotalPrice();       // ‚úÖ c·∫≠p nh·∫≠t t·ªïng ti·ªÅn
}
function updateQuantity(index, newValue) {
  selectedMaterial[index].quantity = parseInt(newValue) || 0;
  calculateTotalPrice(); // T√≠nh l·∫°i t·ªïng ti·ªÅn ngay
}



function renderSelectedMaterials() {
  const container = document.getElementById("selected-materials")
  if (!container) return

  if (selectedMaterial.length === 0) {
    container.innerHTML = "<p>Ch∆∞a c√≥ v·∫≠t t∆∞ n√†o ƒë∆∞·ª£c ch·ªçn</p>"
    return
  }

  let totalAmount = 0
  let html = `
    <table class="selected-materials-table">
      <thead>
        <tr>
          <th>M√£ v·∫≠t t∆∞</th>
          <th>T√™n v·∫≠t t∆∞</th>
          <th>S·ªë l∆∞·ª£ng</th>
          <th>ƒê∆°n gi√°</th>
          <th>Th√†nh ti·ªÅn</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
  `

  selectedMaterial.forEach((item, index) => {
    const mat = material.find((m) => m.MAVT === item.materialCode);
const materialName = mat ? mat.TENVT : "Kh√¥ng x√°c ƒë·ªãnh";
const subtotal = item.quantity * item.price
    totalAmount += subtotal

    html += `
      <tr>
        <td>${item.materialCode}</td>
        <td>${materialName}</td>
        <td><input type="number" value="${item.quantity}" min="1" onchange="updateQuantity(${index}, this.value)"></td>

        <td>${formatCurrency(item.price)}</td>
        <td>${formatCurrency(subtotal)}</td>
        <td><button class="remove-btn" onclick="removeMaterialFromOrder(${index})"><i class="fas fa-times"></i></button></td>
      </tr>
    `
  })

  html += `
      </tbody>
      <tfoot>
        <tr>
          <td colspan="4" style="text-align: right; font-weight: bold;">T·ªïng ti·ªÅn:</td>
          <td colspan="2" style="font-weight: bold;">${formatCurrency(totalAmount)}</td>
        </tr>
      </tfoot>
    </table>
  `

  container.innerHTML = html
}

// L∆∞u ƒë∆°n h√†ng (th√™m ho·∫∑c c·∫≠p nh·∫≠t)
async function saveOrder() {
  const MADH = document.getElementById("MADH").value
  const NGAYDAT = document.getElementById("NGAYDAT").value
  const TRANGTHAIDH = document.getElementById("TRANGTHAIDH").value
  const TONGTIEN = parseFloat(document.getElementById("TONGTIEN").value)
 const payload = {
    MADH,
    NGAYDAT,
    TRANGTHAIDH,
    TONGTIEN,
    items: selectedMaterial, // ‚úÖ g·ª≠i m·∫£ng v·∫≠t t∆∞ ƒëi
  };
  if (!MADH || !NGAYDAT || !TRANGTHAIDH || isNaN(TONGTIEN)) {
    alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.")
    return
  }
  const method = editingOrderId ? "PUT" : "POST";
  const url = editingOrderId
    ? `http://localhost:3000/api/order/${editingOrderId}`
    : `http://localhost:3000/api/order`;
    console.log("üßæ selectedMaterial g·ª≠i ƒëi:", selectedMaterial);

    try {
      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      if (!res.ok) throw new Error(await res.text());

      alert("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u!");
    closeOrderModal()
    fetchOrders()
    calculateTotalPrice()
  } catch (err) {
    console.error("L·ªói khi l∆∞u ƒë∆°n h√†ng:", err)
  }
  const tongTienInput = document.getElementById("TONGTIEN");

}

// Xo√° ƒë∆°n h√†ng
async function deleteOrder(id) {
  if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° ƒë∆°n h√†ng n√†y?")) return
  try {
    await fetch(`${API_URL}/${id}`, { method: "DELETE" })
    fetchOrders()
  } catch (err) {
    console.error("L·ªói khi xo√° ƒë∆°n h√†ng:", err)
  }
}

// ƒê√≥ng modal
function closeOrderModal() {
  document.getElementById("modal-order").style.display = "none"
}


function filterOrders() {
  const keyword = document.getElementById("searchOrderInput").value.toLowerCase()
  const rows = document.querySelectorAll("#orders-body tr")
  rows.forEach(row => {
    const text = row.textContent.toLowerCase()
    row.style.display = text.includes(keyword) ? "" : "none"
  })
}
// ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá
function formatCurrency(amount) {
  return Number(amount).toLocaleString("vi-VN", { style: "currency", currency: "VND" })
}

// G·ªçi l√∫c t·∫£i trang
fetchOrders()
// X·ª≠ l√Ω click tr√™n c√°c √¥ ch·ª©c nƒÉng (cards) ·ªü trang home
document.addEventListener("DOMContentLoaded", () => {
  const cardMaterials = document.getElementById("card-materials")
  const cardSuppliers = document.getElementById("card-suppliers")
  const cardOrders = document.getElementById("card-orders")
  const cardWarehouse = document.getElementById("card-warehouse")
  const cardReport = document.getElementById("card-report")

  if (cardMaterials) cardMaterials.addEventListener("click", () => navigateTo("materials"))
  if (cardSuppliers) cardSuppliers.addEventListener("click", () => navigateTo("suppliers"))
  if (cardOrders) cardOrders.addEventListener("click", () => navigateTo("orders"))
  if (cardWarehouse) cardWarehouse.addEventListener("click", () => navigateTo("warehouse"))
  if (cardReport) cardReport.addEventListener("click", () => navigateTo("report"))


  // üîÑ T·ª± ƒë·ªông ƒëi·ªÅn n·∫øu ƒë√£ l∆∞u
  const savedUsername = localStorage.getItem("savedUsername")
  const savedPassword = localStorage.getItem("savedPassword")
  if (savedUsername && savedPassword) {
    document.getElementById("username").value = savedUsername
    document.getElementById("password").value = savedPassword
    document.getElementById("remember").checked = true
  }

  // Set up new password form events
  const newPass = document.getElementById("new-password")
  const confirmPass = document.getElementById("confirm-password")
  if (newPass && confirmPass) {
    ;[newPass, confirmPass].forEach((input) => {
      input.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          submitNewPassword() // T·ª± ƒë·ªông x√°c nh·∫≠n
        }
      })
    })
  }

  const isLoggedIn = sessionStorage.getItem("loggedIn") === "true"

  if (isLoggedIn) {
    navigateTo("home")
  } else {
    navigateTo("login") // ho·∫∑c ƒë·ªÉ nguy√™n, ƒë·ª´ng g·ªçi navigateTo v·ªôi
  }

  // Kh·ªüi t·∫°o danh s√°ch v·∫≠t t∆∞ cho form ƒë∆°n h√†ng
  populateMaterialSelect()
})

function populateMaterialSelect() {
  const materialSelect = document.getElementById("order-material");
  if (!materialSelect) return;

  materialSelect.innerHTML = '<option value="">-- Ch·ªçn v·∫≠t t∆∞ --</option>';

  material.forEach((mat) => {
    materialSelect.innerHTML += `
      <option value="${mat.MAVT}">${mat.MAVT} - ${mat.TENVT}</option>
    `;
  });
}


// ===== QU·∫¢N L√ù NH√Ä CUNG C·∫§P =====
// --- suppliers page ---

let editingSupplierIndex = null

function showAddSupplierModal() {
  isEditingSupplier = false;
  editingSupplierId = null;

  document.getElementById("modal-sup-title").textContent = "Th√™m nh√† cung c·∫•p";
  document.getElementById("MANCC").value = "";
  document.getElementById("TENNCC").value = "";
  document.getElementById("DIACHI").value = "";
  document.getElementById("SDT").value = "";
  document.getElementById("EMAIL").value = "";

  ["MANCC", "TENNCC", "DIACHI", "SDT", "EMAIL"].forEach(id => {
    document.getElementById(id).readOnly = false;
  });

  document.querySelector("#modal-supplier .modal-footer button:first-child").style.display = "inline-block";

  document.getElementById("modal-supplier").style.display = "block";

  // T·∫°o div c√≥ class "function-bar1"
  const functionBar = document.createElement("div");
  functionBar.classList.add("function-bar");

  // B·∫°n c√≥ th·ªÉ ch·ªâ ƒë·ªãnh th√™m c√°c n·ªôi dung ho·∫∑c n√∫t v√†o functionBar n·∫øu c·∫ßn
  functionBar.innerHTML = `
    <button class="btn-primary" onclick="showAddSupplierModal()">Th√™m nh√† cung c·∫•p</button>
    <button class="btn-secondary" onclick="closeSupplierModal()">ƒê√≥ng</button>
  `;

  // Ch√®n function bar v√†o modal-body, n·∫øu function-bar ch∆∞a c√≥
  const modalContent = document.querySelector("#modal-supplier .modal-content");
  if (!document.querySelector(".function-bar")) {
    modalContent.insertBefore(functionBar, modalContentfirstChild); // Ch√®n ·ªü ƒë·∫ßu modal-body
  }
}

function showEditSupplierModal(maNCC) {
  const supplier = suppliers.find(s => s.MANCC === maNCC);
  if (!supplier) return alert("Kh√¥ng t√¨m th·∫•y!");

  isEditingSupplier = true;
  editingSupplierId = maNCC;

  document.getElementById("modal-sup-title").textContent = "Ch·ªânh s·ª≠a nh√† cung c·∫•p";
  document.getElementById("MANCC").value = supplier.MANCC;
  document.getElementById("TENNCC").value = supplier.TENNCC;
  document.getElementById("DIACHI").value = supplier.DIACHI;
  document.getElementById("SDT").value = supplier.SDT;
  document.getElementById("EMAIL").value = supplier.EMAIL;

  document.getElementById("MANCC").readOnly = true;

  document.querySelector("#modal-supplier .modal-footer button:first-child").style.display = "inline-block";

  document.getElementById("modal-supplier").style.display = "block";
}

function saveSupplier() {
  const mancc = document.getElementById("MANCC").value.trim();
  const tenncc = document.getElementById("TENNCC").value.trim();
  const diachi = document.getElementById("DIACHI").value.trim();
  const sdt = document.getElementById("SDT").value.trim();
  const email = document.getElementById("EMAIL").value.trim();
  console.log("MANCC:", mancc);
  console.log("TENNCC:", tenncc);
  console.log("DIACHI:", diachi);
  console.log("SDT:", sdt);
  console.log("EMAIL:", email);
  
  if (!mancc || !tenncc || !diachi || !sdt || !email) {
    alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.");
    return;
  }

  const supplierData = {
    MaNCC: mancc,
    TenNCC: tenncc,
    DiaChi: diachi,
    SDT: sdt,
    Email: email
  };

  if (isEditingSupplier && editingSupplierId) {
    // ‚úÖ G·ªçi PUT ƒë·ªÉ c·∫≠p nh·∫≠t
    fetch(`http://localhost:3000/api/suppliers/${editingSupplierId}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(supplierData)
    })
      .then(res => {
        if (!res.ok) return res.text().then(text => { throw new Error(text); });
        alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
        closeSupplierModal();
        fetchSuppliers();
      })
      .catch(err => {
        alert("L·ªói c·∫≠p nh·∫≠t: " + err.message);
      });
  } else {
    // ‚úÖ G·ªçi POST ƒë·ªÉ th√™m m·ªõi
    fetch("http://localhost:3000/api/suppliers", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(supplierData)
    })
      .then(res => {
        if (!res.ok) return res.text().then(text => { throw new Error(text); });
        alert("ƒê√£ th√™m nh√† cung c·∫•p!");
       
        closeSupplierModal();
        fetchSuppliers();
      })
      .catch(err => {
        alert("L·ªói th√™m nh√† cung c·∫•p: " + err.message);
      });
  }
}

async function deleteSupplier(maNCC) {
  if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a?")) {
    try {
      const response = await fetch(`http://localhost:3000/api/suppliers/${maNCC}`, {
        method: "DELETE",
      });

      if (response.ok) {
        alert("ƒê√£ x√≥a nh√† cung c·∫•p");
        fetchSuppliers(); // G·ªçi l·∫°i h√†m ƒë·ªÉ t·∫£i l·∫°i danh s√°ch nh√† cung c·∫•p
      } else {
        alert("Kh√¥ng th·ªÉ x√≥a nh√† cung c·∫•p");
      }
    } catch (err) {
      console.error("L·ªói khi x√≥a:", err);
      alert("ƒê√£ x·∫£y ra l·ªói khi x√≥a");
    }
  }
}


function closeSupplierModal() {
  document.getElementById("modal-supplier").style.display = "none";

  ["MANCC", "TENNCC", "DIACHI", "SDT", "EMAIL"].forEach(id => {
    document.getElementById(id).readOnly = false;
    document.getElementById(id).value = "";
  });

  document.querySelector("#modal-supplier .modal-footer button:first-child").style.display = "inline-block";

  isEditingSupplier = false;
  editingSupplierId = null;
}

function renderSuppliers() {
  const supplierList = document.getElementById("suppliers-body");
  supplierList.innerHTML = ""; // x√≥a n·ªôi dung c≈©

  suppliers.forEach((supplier) => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td>${supplier.MANCC}</td>
      <td>${supplier.TENNCC}</td>
      <td>${supplier.DIACHI}</td>
      <td>${supplier.SDT}</td>
      <td>${supplier.EMAIL}</td>
      <td class="action-icons">
        <i class="fas fa-eye" onclick="showSupplierDetailModal('${supplier.MANCC}')"></i>
        <i class="fas fa-pen" onclick="showEditSupplierModal('${supplier.MANCC}')"></i>
        <i class="fas fa-trash" onclick="deleteSupplier('${supplier.MANCC}')"></i>
      </td>
    `;
    supplierList.appendChild(row);
  });
}


function filterSuppliers() {
  const keyword = document.getElementById("searchSupplierInput").value.toLowerCase();
  const rows = document.querySelectorAll("#suppliers-body tr");

  rows.forEach((row) => {
      const text = row.textContent.toLowerCase();
      row.style.display = text.includes(keyword) ? "" : "none"; // L·ªçc h√†ng
  });
}

function createSupplierDetailModal() {
  // Ki·ªÉm tra n·∫øu modal ƒë√£ t·ªìn t·∫°i
  if (document.getElementById("supplier-detail-modal")) {
      return;
  }

  const modal = document.createElement("div");
  modal.id = "supplier-detail-modal";
  modal.className = "detail-modal";
  modal.innerHTML = `
      <div class="detail-modal-content">
          <div class="detail-modal-header">
              <h3 class="detail-modal-title">Chi ti·∫øt nh√† cung c·∫•p</h3>
              <button class="detail-modal-close" onclick="closeSupplierDetailModal()">&times;</button>
          </div>
          <div class="detail-modal-body" id="supplier-detail-modal-body">
              <!-- N·ªôi dung s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë·ªông -->
          </div>
          <div class="detail-modal-footer">
              <button class="btn-secondary" onclick="closeSupplierDetailModal()">ƒê√≥ng</button>
          </div>
      </div>
  `;
  document.body.appendChild(modal);
}

function showSupplierDetailModal(maNCC) {
  const supplier = suppliers.find(s => s.MANCC === maNCC);
  if (!supplier) return alert("Kh√¥ng t√¨m th·∫•y!");

  isEditingSupplier = false;
  editingSupplierId = null;

  document.getElementById("modal-sup-title").textContent = "Chi ti·∫øt nh√† cung c·∫•p";
  document.getElementById("MANCC").value = supplier.MANCC;
  document.getElementById("TENNCC").value = supplier.TENNCC;
  document.getElementById("DIACHI").value = supplier.DIACHI;
  document.getElementById("SDT").value = supplier.SDT;
  document.getElementById("EMAIL").value = supplier.EMAIL;

  ["MANCC", "TENNCC", "DIACHI", "SDT", "EMAIL"].forEach(id => {
    document.getElementById(id).readOnly = true;
  });

  // ·∫®n n√∫t L∆∞u
  document.querySelector("#modal-supplier .modal-footer button:first-child").style.display = "none";

  document.getElementById("modal-supplier").style.display = "block";
}



function closeSupplierDetailModal() {
  const modal = document.getElementById("supplier-detail-modal");
  if (modal) modal.remove();
}

// ===== QU·∫¢N L√ù KHO H√ÄNG =====//
// --- warehouse page ---

let editingIndex = null; // Bi·∫øn ƒë·ªÉ x√°c ƒë·ªãnh ƒëang ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
editingIndex = MAKH;
let warehouse = [];
let material = [];
const baseURL = 'http://localhost:3000/api/warehouse';
async function fetchWarehouse() {
  try {
    const res = await fetch("http://localhost:3000/api/warehouse")

    if (!res.ok) {
      const text = await res.text()
      throw new Error("L·ªói t·ª´ server: " + text)
    }

    const data = await res.json()
    warehouse = data.map(item => ({
      MAKH: item.MAKH,
      MAVT: item.MAVT,
      SOLUONG: item.SOLUONG,
      VITRI: item.VITRI,
      THOIGIANCN: item.THOIGIANCN
    }))
    renderWarehouse()
  } catch (err) {
    console.error("üî• L·ªói khi l·∫•y kho h√†ng:", err)
    alert("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu kho h√†ng. Xem console ƒë·ªÉ bi·∫øt th√™m.")
  }
}

document.addEventListener("DOMContentLoaded", () => {
  loadMaterialsForWarehouse().then(() => {
    // d·ªØ li·ªáu ƒë√£ load xong
    fetchWarehouse();
  });
  
})

function loadMaterialsForWarehouse() {
  return fetch('http://localhost:3000/api/material')
    .then(res => {
      if (!res.ok) {
        throw new Error('API kh√¥ng t√¨m th·∫•y (404) ho·∫∑c c√≥ l·ªói kh√°c.');
      }
      return res.json();
    })
    .then(data => {
      material = data; // ‚úÖ L∆∞u l·∫°i d·ªØ li·ªáu v·∫≠t t∆∞ to√†n c·ª•c
      const select = document.getElementById('MAVT');
      select.innerHTML = '<option value="">-- Ch·ªçn v·∫≠t t∆∞ --</option>';
      data.forEach(vt => {
        const option = document.createElement('option');
        option.value = vt.MAVT;
        option.textContent = vt.TENVT;
        select.appendChild(option);
      });
    })
    .catch(error => {
      console.error('L·ªói khi l·∫•y d·ªØ li·ªáu v·∫≠t t∆∞:', error);
    });
}

function showAddWarehouseModal() {
  document.getElementById("modal-wh-title").textContent = "Th√™m kho h√†ng"
  document.getElementById("warehouse_MAKH").value = ""

  document.getElementById("SOLUONG").value = ""
  document.getElementById("VITRI").value = ""
  document.getElementById("THOIGIANCN").value = ""
  editingWarehouseIndex = null
  document.getElementById("modal-warehouse").style.display = "block"
}
async function showEditWarehouseModal(index) {
  const item = warehouse[index]; // ‚úÖ l·∫•y to√†n b·ªô object t·∫°i index
  editingIndex = index;

  console.log("üü° M√£ kho ƒëang g·ªçi API:", item.MAKH);

  try {
    const res = await fetch(`http://localhost:3000/api/warehouse/${item.MAKH}`);
    const data = await res.json();
console.log("üì¶ D·ªØ li·ªáu kho t·ª´ API:", data);


    // ‚úÖ C·∫≠p nh·∫≠t form v·ªõi d·ªØ li·ªáu t·ª´ API
    document.getElementById('modal-wh-title').innerText = 'Ch·ªânh s·ª≠a v·∫≠t t∆∞ kho';
    document.getElementById('warehouse_MAKH').value = data.MAKH;
    console.log('‚úÖ MAKH set:', data.MAKH) 
  document.getElementById('SOLUONG').value = data.SOLUONG;
    document.getElementById('VITRI').value = data.VITRI;
    document.getElementById('THOIGIANCN').value = data.THOIGIANCN?.slice(0, 10);

    // ‚úÖ M·ªü modal
    document.getElementById("modal-warehouse").style.display = "block";

    // ‚úÖ G√°n l·∫°i s·ª± ki·ªán l∆∞u
    document.querySelector('.save-btn').onclick = () => saveWarehouse();
  } catch (err) {
    console.error("‚ùå L·ªói khi g·ªçi API kho:", err);
    alert("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ƒë·ªÉ ch·ªânh s·ª≠a.");
  }
}

async function saveWarehouse() {
  const code = document.getElementById("MAKH").value;
  const mavt = document.getElementById("MAVT").value;
  const qty = document.getElementById("SOLUONG").value;
  const location = document.getElementById("VITRI").value;
  const date = document.getElementById("THOIGIANCN").value;

  if (!code || !mavt || !qty || !location || !date) {
    alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.");
    return;
  }

  const item = {
    MAKH: code,
    MAVT: mavt,
    SOLUONG: parseInt(qty),
    VITRI: location,
    THOIGIANCN: date
  };

  try {
    if (editingIndex !== null) {
      const original = warehouse[editingIndex];
      await fetch(`${baseURL}/${original.MAKH}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(item)
      });
    } else {
      await fetch(baseURL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(item)
      });
    }

    await fetchWarehouse();
    closeWarehouseModal();
  } catch (err) {
    console.error("L·ªói khi l∆∞u kho h√†ng:", err);
    alert("Kh√¥ng th·ªÉ l∆∞u kho h√†ng.");
  }
}


async function deleteWarehouse(index) {
  if (!confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën xo√° v·∫≠t t∆∞ n√†y?")) return;

  const makh = warehouse[index].MAKH;
  try {
    await fetch(`${baseURL}/${makh}`, { method: 'DELETE' });
    await fetchWarehouseData();
  } catch (err) {
    console.error("L·ªói khi xo√° kho h√†ng:", err);
    alert("Kh√¥ng th·ªÉ xo√° kho h√†ng.");
  }
}


function closeWarehouseModal() {
  editingIndex = null;
  document.getElementById("modal-warehouse").style.display = "none";
}

function renderWarehouse() {
  const body = document.getElementById("warehouse-body");
  body.innerHTML = "";

  warehouse.forEach((item, index) => {
    const row = `
        <tr>
          <td>${item.MAKH}</td>
          <td>${item.SOLUONG}</td>
          <td>${item.VITRI}</td>
          <td>${new Date(item.THOIGIANCN).toLocaleDateString()}</td>
          <td class="action-icons">
            <i class="fas fa-eye" onclick="showWarehouseDetailModal(${index})"></i>
            <i class="fas fa-pen" onclick="showEditWarehouseModal(${index})"></i>
            <i class="fas fa-trash" onclick="deleteWarehouse(${index})"></i>
          </td>
        </tr>`;
    body.innerHTML += row;
  });
}


function filterWarehouse() {
  const keyword = document.getElementById("searchWarehouseInput").value.toLowerCase()
  const rows = document.querySelectorAll("#warehouse-body tr")

  rows.forEach((row) => {
    const text = row.textContent.toLowerCase()
    row.style.display = text.includes(keyword) ? "" : "none"
  })
}

function createWarehouseDetailModal() {
  // Ki·ªÉm tra n·∫øu modal ƒë√£ t·ªìn t·∫°i
  if (document.getElementById("warehouse-detail-modal")) {
    return
  }

  const modal = document.createElement("div")
  modal.id = "warehouse-detail-modal"
  modal.className = "detail-modal"
  modal.innerHTML = `
    <div class="detail-modal-content">
      <div class="detail-modal-header">
        <h3 class="detail-modal-title">Chi ti·∫øt kho h√†ng</h3>
        <button class="detail-modal-close" onclick="closeWarehouseDetailModal()">&times;</button>
      </div>
      <div class="detail-modal-body" id="warehouse-detail-modal-body">
        <!-- N·ªôi dung s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë·ªông -->
      </div>
      <div class="detail-modal-footer">
        <button class="btn-secondary" onclick="closeWarehouseDetailModal()">ƒê√≥ng</button>
      </div>
    </div>
  `
  document.body.appendChild(modal)
}
async function showWarehouseDetailModal(index) {
  const wh = warehouse[index];
  if (!wh) return alert("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu kho!");

  createWarehouseDetailModal();

  try {
    const res = await fetch(`http://localhost:3000/api/material/warehouse/${wh.MAKH}/value`);
    const data = await res.json();

    let stockValue = 0;
    let materials = [];

    if (data.totalValue !== undefined && Array.isArray(data.materials)) {
      stockValue = data.totalValue;
      materials = data.materials;
    } else if (Array.isArray(data)) {
      // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ m·∫£ng tr·ª±c ti·∫øp
      materials = data;
      materials.forEach(mat => {
        const soLuong = mat.SOLUONG || 0;
        const donGia = mat.DONGIA || 0;
        stockValue += soLuong * donGia;
      });
    }

    const modalBody = document.getElementById("warehouse-detail-modal-body");

    // Th√¥ng tin kho
    modalBody.innerHTML = `
      <div class="detail-info-grid">
        <div class="detail-info-item">
          <span class="detail-info-label">M√£ kho h√†ng:</span>
          <span class="detail-info-value">${wh.MAKH}</span>
        </div>
        <div class="detail-info-item">
          <span class="detail-info-label">S·ªë l∆∞·ª£ng:</span>
          <span class="detail-info-value">${wh.SOLUONG}</span>
        </div>
        <div class="detail-info-item">
          <span class="detail-info-label">V·ªã tr√≠:</span>
          <span class="detail-info-value">${wh.VITRI}</span>
        </div>
        <div class="detail-info-item">
          <span class="detail-info-label">Ng√†y c·∫≠p nh·∫≠t:</span>
          <span class="detail-info-value">${wh.THOIGIANCN?.slice(0, 10) || "N/A"}</span>
        </div>
        <div class="detail-info-item">
          <span class="detail-info-label">Gi√° tr·ªã t·ªìn kho:</span>
          <span class="detail-info-value">${formatCurrency(stockValue)}</span>
        </div>
      </div>
    `;

    // Danh s√°ch v·∫≠t t∆∞
    const materialListContainer = document.createElement("div");
    materialListContainer.className = "material-list";
    materialListContainer.style.marginTop = "20px";
    materialListContainer.innerHTML = `<h4>Danh s√°ch v·∫≠t t∆∞:</h4>`;

    materials.forEach((mat, i) => {
      const item = document.createElement("div");
      item.className = "material-item";
      item.innerHTML = `
        <div><strong>STT:</strong> ${i + 1}</div>
        <div><strong>M√£ VT:</strong> ${mat.MAVT}</div>
        <div><strong>S·ªë l∆∞·ª£ng:</strong> ${mat.SOLUONG}</div>
        <div><strong>ƒê∆°n gi√°:</strong> ${formatCurrency(mat.DONGIA)}</div>
        <hr>
      `;
      materialListContainer.appendChild(item);
    });

    modalBody.appendChild(materialListContainer);
    document.getElementById("warehouse-detail-modal").style.display = "flex";
  } catch (error) {
    console.error("L·ªói khi l·∫•y v·∫≠t t∆∞ theo kho:", error);
    alert("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu v·∫≠t t∆∞ cho kho n√†y.");
  }
}



function closeWarehouseDetailModal() {
  const modal = document.getElementById("warehouse-detail-modal")
  if (modal) {
    modal.style.display = "none"
  }
}
function formatCurrency(value) {
  return new Intl.NumberFormat("vi-VN", {
    style: "currency",
    currency: "VND",
  }).format(value);
}


// ===== B√ÅO C√ÅO & TH·ªêNG K√ä =====
// M·∫£ng l∆∞u tr·ªØ c√°c b√°o c√°o ƒë√£ t·∫°o


// Fix tab switching to ensure proper display
let materials = []


let reports = []


document.addEventListener("DOMContentLoaded", () => {
  const tabs = document.querySelectorAll(".tab")
  const tabContents = document.querySelectorAll(".tab-content")

  tabs.forEach((tab) => {
    tab.addEventListener("click", () => {
      // Remove active class from all tabs and contents
      tabs.forEach((t) => t.classList.remove("active"))
      tabContents.forEach((c) => {
        c.classList.remove("active")
        c.style.display = "none"
      })

      // Add active class to clicked tab and show corresponding content
      tab.classList.add("active")
      const tabId = tab.dataset.tab
      const content = document.getElementById(`${tabId}-tab`)
      if (content) {
        content.classList.add("active")
        content.style.display = "block"
      }
    })
  })

  // Fix report period change handler
  const reportPeriod = document.getElementById("report-period")
  if (reportPeriod) {
    reportPeriod.addEventListener("change", function () {
      const customRange = document.getElementById("custom-date-range")
      if (customRange) {
        customRange.style.display = this.value === "custom" ? "block" : "none"
      }
    })
  }

  // Update statistics on report page load
  if (document.getElementById("statistics-tab")) {
    updateReportStatisticsFromTables()
  }

  // Render danh s√°ch b√°o c√°o
  renderReports()
})

function renderReports() {
  const reportTable = document.querySelector("#report-table tbody")
  if (!reportTable) return

  reportTable.innerHTML = ""

  reports.forEach((report, index) => {
    const typeText = getReportTypeText(report.type)

    const row = `
      <tr>
        <td>${index + 1}</td>
        <td>${report.name}</td>
        <td>${typeText}</td>
        <td>${report.date}</td>
        <td class="action-icons">
          <i class="fas fa-eye" onclick="viewReport(${report.id})" title="Xem b√°o c√°o"></i>
          <i class="fas fa-download" onclick="downloadReport(${report.id})" title="T·∫£i xu·ªëng"></i>
          <i class="fas fa-trash" onclick="deleteReport(${report.id})" title="X√≥a"></i>
        </td>
      </tr>
    `
    reportTable.innerHTML += row
  })
}

function getReportTypeText(type) {
  switch (type) {
    case "inventory":
      return "B√°o c√°o t·ªìn kho"
    case "supplier":
      return "B√°o c√°o nh√† cung c·∫•p"
    case "transaction":
      return "B√°o c√°o giao d·ªãch"
    default:
      return "Kh√°c"
  }
}

function createReportDetailModal() {
  // Ki·ªÉm tra n·∫øu modal ƒë√£ t·ªìn t·∫°i
  if (document.getElementById("report-detail-modal")) {
    return
  }

  const modal = document.createElement("div")
  modal.id = "report-detail-modal"
  modal.className = "detail-modal"
  modal.innerHTML = `
    <div class="detail-modal-content">
      <div class="detail-modal-header">
        <h3 class="detail-modal-title">Chi ti·∫øt b√°o c√°o</h3>
        <button class="detail-modal-close" onclick="closeReportDetailModal()">&times;</button>
      </div>
      <div class="detail-modal-body" id="report-detail-modal-body">
        <!-- N·ªôi dung s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë·ªông -->
      </div>
      <div class="detail-modal-footer">
        <button class="btn-primary" onclick="downloadReportDetail()">T·∫£i xu·ªëng</button>
        <button class="btn-secondary" onclick="closeReportDetailModal()">ƒê√≥ng</button>
      </div>
    </div>
  `
  document.body.appendChild(modal)
}

function viewReport(id) {
  const report = reports.find((r) => r.id === id)
  if (!report) {
    alert("Kh√¥ng t√¨m th·∫•y b√°o c√°o!")
    return
  }

  // T·∫°o modal n·∫øu ch∆∞a c√≥
  createReportDetailModal()

  // T·∫°o n·ªôi dung b√°o c√°o d·ª±a tr√™n lo·∫°i
  let reportContent = ""

  switch (report.type) {
    case "inventory":
      reportContent = createInventoryReportContent(report)
      break
    case "supplier":
      reportContent = createSupplierReportContent(report)
      break
    case "transaction":
      reportContent = createTransactionReportContent(report)
      break
    default:
      reportContent = `<p>Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt cho b√°o c√°o n√†y.</p>`
  }

  // C·∫≠p nh·∫≠t n·ªôi dung
  const modalBody = document.getElementById("report-detail-modal-body")
  modalBody.innerHTML = `
    <div class="detail-info-grid">
      <div class="detail-info-item">
        <span class="detail-info-label">T√™n b√°o c√°o:</span>
        <span class="detail-info-value">${report.name}</span>
      </div>
      <div class="detail-info-item">
        <span class="detail-info-label">Lo·∫°i b√°o c√°o:</span>
        <span class="detail-info-value">${getReportTypeText(report.type)}</span>
      </div>
      <div class="detail-info-item">
        <span class="detail-info-label">Ng√†y t·∫°o:</span>
        <span class="detail-info-value">${report.date}</span>
      </div>
    </div>
    
    <div style="margin-top: 20px;">
      <h4>N·ªôi dung b√°o c√°o</h4>
      ${reportContent}
    </div>
  `

  // Hi·ªÉn th·ªã modal
  document.getElementById("report-detail-modal").style.display = "flex"
}

function createInventoryReportContent(report) {
  let html = `
    <table class="selected-materials-table" style="margin-top: 15px;">
      <thead>
        <tr>
          <th>M√£ v·∫≠t t∆∞</th>
          <th>T√™n v·∫≠t t∆∞</th>
          <th>S·ªë l∆∞·ª£ng t·ªìn</th>
          <th>ƒê∆°n gi√°</th>
          <th>Gi√° tr·ªã t·ªìn kho</th>
        </tr>
      </thead>
      <tbody>
  `

  let totalValue = 0

  warehouse.forEach((item) => {
    const material = materials.find((m) => m.code === item.code || m.name === item.name)
    const price = material?.DONGIA || 0
    const value = item.qty * price
    totalValue += value

    html += `
      <tr>
        <td>${item.code}</td>
        <td>${item.name}</td>
        <td>${item.qty}</td>
        <td>${formatCurrency(price)}</td>
        <td>${formatCurrency(value)}</td>
      </tr>
    `
  })

  html += `
      </tbody>
      <tfoot>
        <tr>
          <td colspan="4" style="text-align: right; font-weight: bold;">T·ªïng gi√° tr·ªã t·ªìn kho:</td>
          <td style="font-weight: bold;">${formatCurrency(totalValue)}</td>
        </tr>
      </tfoot>
    </table>
  `

  return html
}

function createSupplierReportContent(report) {
  let html = `
    <table class="selected-materials-table" style="margin-top: 15px;">
      <thead>
        <tr>
          <th>M√£ NCC</th>
          <th>T√™n nh√† cung c·∫•p</th>
          <th>S·ªë v·∫≠t t∆∞ cung c·∫•p</th>
          <th>T·ªïng gi√° tr·ªã</th>
        </tr>
      </thead>
      <tbody>
  `

  let totalValue = 0

  suppliers.forEach((supplier) => {
    const supplierMaterials = materials.filter((m) => m.supplierCode === supplier.code)
    const materialCount = supplierMaterials.length

    let supplierValue = 0
    supplierMaterials.forEach((mat) => {
      const warehouseItem = warehouse.find((w) => w.code === mat.warehouseCode)
      if (warehouseItem) {
        supplierValue += warehouseItem.qty * mat.price
      }
    })

    totalValue += supplierValue

    html += `
      <tr>
        <td>${supplier.code}</td>
        <td>${supplier.name}</td>
        <td>${materialCount}</td>
        <td>${formatCurrency(supplierValue)}</td>
      </tr>
    `
  })

  html += `
      </tbody>
      <tfoot>
        <tr>
          <td colspan="3" style="text-align: right; font-weight: bold;">T·ªïng gi√° tr·ªã:</td>
          <td style="font-weight: bold;">${formatCurrency(totalValue)}</td>
        </tr>
      </tfoot>
    </table>
  `

  return html
}

function createTransactionReportContent(report) {
  let html = `
    <table class="selected-materials-table" style="margin-top: 15px;">
      <thead>
        <tr>
          <th>M√£ ƒë∆°n h√†ng</th>
          <th>Ng√†y ƒë·∫∑t</th>
          <th>Tr·∫°ng th√°i</th>
          <th>S·ªë v·∫≠t t∆∞</th>
          <th>T·ªïng ti·ªÅn</th>
        </tr>
      </thead>
      <tbody>
  `

  let totalAmount = 0

  orders.forEach((order) => {
    const orderTotal = order.items.reduce((sum, item) => sum + item.quantity * item.price, 0)
    totalAmount += orderTotal

    html += `
      <tr>
        <td>${order.code}</td>
        <td>${order.date}</td>
        <td>${order.status}</td>
        <td>${order.items.length}</td>
        <td>${formatCurrency(orderTotal)}</td>
      </tr>
    `
  })

  html += `
      </tbody>
      <tfoot>
        <tr>
          <td colspan="4" style="text-align: right; font-weight: bold;">T·ªïng doanh thu:</td>
          <td style="font-weight: bold;">${formatCurrency(totalAmount)}</td>
        </tr>
      </tfoot>
    </table>
  `

  return html
}

function closeReportDetailModal() {
  const modal = document.getElementById("report-detail-modal")
  if (modal) {
    modal.style.display = "none"
  }
}

function downloadReportDetail() {
  alert("ƒêang t·∫£i xu·ªëng b√°o c√°o...")
}

function downloadReport(id) {
  const report = reports.find((r) => r.id === id)
  if (!report) {
    alert("Kh√¥ng t√¨m th·∫•y b√°o c√°o!")
    return
  }

  alert(`ƒêang t·∫£i xu·ªëng b√°o c√°o: ${report.name}`)
}

function deleteReport(id) {
  if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√°o c√°o n√†y?")) {
    const index = reports.findIndex((r) => r.id === id)
    if (index !== -1) {
      reports.splice(index, 1)
      renderReports()
    }
  }
}

function handleReportSubmit(e) {
  e.preventDefault() // ‚úÖ NgƒÉn load l·∫°i trang

  const reportType = document.getElementById("report-type").value
  const reportPeriod = document.getElementById("report-period").value

  if (!reportType || !reportPeriod) {
    alert("Vui l√≤ng ch·ªçn lo·∫°i b√°o c√°o v√† k·ª≥ b√°o c√°o!")
    return
  }

  let reportName = ""
  const reportDate = new Date().toISOString().split("T")[0]
  let reportContent = ""

  // T·∫°o t√™n b√°o c√°o d·ª±a tr√™n lo·∫°i v√† k·ª≥
  const typeText = getReportTypeText(reportType)
  const periodText = getPeriodText(reportPeriod)

  reportName = `${typeText} ${periodText}`

  // T·∫°o n·ªôi dung b√°o c√°o
  switch (reportType) {
    case "inventory":
      reportContent = `B√°o c√°o chi ti·∫øt t·ªìn kho ${periodText.toLowerCase()}`
      break
    case "supplier":
      reportContent = `B√°o c√°o chi ti·∫øt nh√† cung c·∫•p ${periodText.toLowerCase()}`
      break
    case "transaction":
      reportContent = `B√°o c√°o chi ti·∫øt giao d·ªãch ${periodText.toLowerCase()}`
      break
  }

  // T·∫°o b√°o c√°o m·ªõi
  const newReport = {
    id: reports.length > 0 ? Math.max(...reports.map((r) => r.id)) + 1 : 1,
    name: reportName,
    type: reportType,
    date: reportDate,
    content: reportContent,
  }

  // Th√™m v√†o danh s√°ch b√°o c√°o
  reports.push(newReport)

  // Hi·ªÉn th·ªã th√¥ng b√°o
  alert("B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")

  // Chuy·ªÉn sang tab xem b√°o c√°o
  const viewReportsTab = document.querySelector('.tab[data-tab="view-reports"]')
  if (viewReportsTab) {
    viewReportsTab.click()
  }

  // C·∫≠p nh·∫≠t danh s√°ch b√°o c√°o
  renderReports()
}

function getPeriodText(period) {
  const now = new Date()
  const year = now.getFullYear()
  const month = now.getMonth() + 1

  switch (period) {
    case "daily":
      return `ng√†y ${now.getDate()}/${month}/${year}`
    case "weekly":
      return `tu·∫ßn ${Math.ceil(now.getDate() / 7)}/${month}/${year}`
    case "monthly":
      return `th√°ng ${month}/${year}`
    case "quarterly":
      return `qu√Ω ${Math.ceil(month / 3)}/${year}`
    case "yearly":
      return `nƒÉm ${year}`
    case "custom":
      const startDate = document.getElementById("start-date").value
      const endDate = document.getElementById("end-date").value
      if (startDate && endDate) {
        return `t·ª´ ${startDate} ƒë·∫øn ${endDate}`
      }
      return `t√πy ch·ªânh`
    default:
      return ""
  }
}

document.getElementById("report-form")?.addEventListener("submit", handleReportSubmit)

// Replace the navigateTo function with this improved version
function navigateTo(sectionId) {
  const sections = document.querySelectorAll("section")
  sections.forEach((sec) => (sec.style.display = "none"))

  const target = document.getElementById(sectionId)
  if (target) {
    target.style.display = "block"

    // üëâ Th√™m g·ªçi fetchSuppliers khi chuy·ªÉn ƒë·∫øn tab nh√† cung c·∫•p
    if (sectionId === "suppliers") {
      fetchSuppliers()
    }

    // Save the current scroll position
    const currentScrollPosition = window.scrollY

    // Only scroll to top for sections other than report
    if (sectionId !== "report") {
      window.scrollTo(0, 0)
    } else {
      // For report section, maintain scroll position and update statistics
      setTimeout(() => {
        updateReportStatisticsFromTables()

        // Fix tab display
        const tabs = target.querySelectorAll(".tab")
        const tabContents = target.querySelectorAll(".tab-content")

        // Ensure at least one tab is active
        let hasActiveTab = false
        tabs.forEach((tab) => {
          if (tab.classList.contains("active")) {
            hasActiveTab = true
            const tabId = tab.dataset.tab
            const content = document.getElementById(`${tabId}-tab`)
            if (content) {
              content.classList.add("active")
              content.style.display = "block"
            }
          }
        })

        // If no active tab, activate the first one
        if (!hasActiveTab && tabs.length > 0) {
          tabs[0].classList.add("active")
          const tabId = tabs[0].dataset.tab
          const content = document.getElementById(`${tabId}-tab`)
          if (content) {
            content.classList.add("active")
            content.style.display = "block"
          }
        }

        // Ensure we're still at the same position
        window.scrollTo(0, currentScrollPosition)
      }, 200)
    }
  }

  // Update username displays
  updateUsernameDisplays()

  // ‚úÖ Kh√≥a cu·ªôn ch·ªâ khi ·ªü trang login ho·∫∑c home
  if (["login", "home"].includes(sectionId)) {
    document.body.style.overflow = "hidden"
  } else {
    document.body.style.overflow = "auto"
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i active c·ªßa menu
  document.querySelectorAll(".sidebar ul li a").forEach((link) => {
    link.classList.remove("active")
    const onclickAttr = link.getAttribute("onclick")
    if (onclickAttr && onclickAttr.includes(`navigateTo('${sectionId}')`)) {
      link.classList.add("active")
    }
    if (
      sectionId === "home" &&
      (!onclickAttr || link.getAttribute("href") === "#") &&
      link.querySelector("span")?.textContent === "Trang ch·ªß"
    ) {
      link.classList.add("active")
    }
  })
}


function getUniqueCodesFromTable(tableId, colIndex = 0) {
  const table = document.querySelector(`#${tableId}`)
  if (!table) return []

  const rows = table.querySelectorAll("tbody tr")
  const codes = [...rows]
    .map((row) => {
      const cells = row.querySelectorAll("td")
      return cells[colIndex]?.innerText.trim()
    })
    .filter(Boolean)

  return [...new Set(codes)]
}

function updateReportStatisticsFromTables() {
  const materialsCount = materials.length
  const suppliersCount = suppliers.length
  const warehouseCount = warehouse.length
  const ordersCount = orders.length

  const statElements = document.querySelectorAll(".stat-number")
  if (statElements.length >= 4) {
    statElements[0].innerText = materialsCount
    statElements[1].innerText = suppliersCount
    statElements[2].innerText = warehouseCount
    statElements[3].innerText = ordersCount
  }

  // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì
  console.log("üìä warehouse d·ªØ li·ªáu ƒëang c√≥:", warehouse)

  updateChartData()

  // C·∫≠p nh·∫≠t b·∫£ng v·∫≠t t∆∞ t·ªìn kho nhi·ªÅu nh·∫•t
  updateTopInventoryTable()
}

function updateChartData() {
  const chartBars = document.querySelectorAll(".chart-bar")
  if (chartBars.length === 0 || warehouse.length === 0) return

  const topWarehouse = warehouse.slice(0, 5)
  const maxQty = Math.max(...topWarehouse.map(item => item.qty || 0), 1)

  topWarehouse.forEach((item, index) => {
    const percentage = Math.round((item.qty / maxQty) * 100)
    const bar = chartBars[index]
    if (!bar) return

    bar.style.height = `${percentage}%`

    const label = bar.querySelector(".chart-label")
    const value = bar.querySelector(".chart-value")

    if (label) label.textContent = item.name
    if (value) value.textContent = `${percentage}%`
  })

  for (let i = topWarehouse.length; i < chartBars.length; i++) {
    chartBars[i].style.height = "0%"
    const label = chartBars[i].querySelector(".chart-label")
    const value = chartBars[i].querySelector(".chart-value")
    if (label) label.textContent = ""
    if (value) value.textContent = "0%"
  }
}


function updateTopInventoryTable() {
  const tableBody = document.querySelector(".inventory-stats table tbody")
  if (!tableBody) return

  // S·∫Øp x·∫øp kho h√†ng theo s·ªë l∆∞·ª£ng gi·∫£m d·∫ßn
  const sortedWarehouse = [...warehouse].sort((a, b) => b.qty - a.qty)

  // L·∫•y t·ªëi ƒëa 5 m·ª•c
  const topItems = sortedWarehouse.slice(0, 5)

  // X√≥a d·ªØ li·ªáu c≈©
  tableBody.innerHTML = ""

  // Th√™m d·ªØ li·ªáu m·ªõi
  topItems.forEach((item) => {
    const matchedMaterial = materials.find(
      (m) => m.MAVT === item.code || m.name === item.name
    )
  
    // N·∫øu kh√¥ng t√¨m th·∫•y v·∫≠t t∆∞, g√°n m·∫∑c ƒë·ªãnh
    const price = matchedMaterial?.DONGIA || 0
    const qty = item.qty || 0
    const totalValue = qty * price
  
    console.log("üîç matchedMaterial:", matchedMaterial)
    console.log("üëâ item.qty:", qty, "ƒê∆°n gi√°:", price)
  
    const row = `
      <tr>
        <td>${item.code}</td>
        <td>${item.name}</td>
        <td>${qty}</td>
        <td>${formatCurrency(totalValue)}</td>
      </tr>
    `
    tableBody.innerHTML += row
  })
  

  // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
  if (topItems.length === 0) {
    tableBody.innerHTML = `
      <tr>
        <td colspan="4" style="text-align: center;">Kh√¥ng c√≥ d·ªØ li·ªáu</td>
      </tr>
    `
  }
}


// Add this function to handle the report card click specifically
document.addEventListener("DOMContentLoaded", () => {
  const cardReport = document.getElementById("card-report")

  if (cardReport) {
    // Remove the existing event listener
    cardReport.removeEventListener("click", () => {
      navigateTo("report")
    })

    // Add a new event listener with custom behavior
    cardReport.addEventListener("click", () => {
      const sections = document.querySelectorAll("section")
      sections.forEach((sec) => (sec.style.display = "none"))

      const reportSection = document.getElementById("report")
      if (reportSection) {
        reportSection.style.display = "block"

        // Update the active menu item
        document.querySelectorAll(".sidebar ul li a").forEach((link) => {
          link.classList.remove("active")
          if (link.getAttribute("onclick")?.includes("report")) {
            link.classList.add("active")
          }
        })

        // Update statistics without scrolling
        Promise.all([
          fetchMaterialsForReport(),
          fetchWarehouseForReport(),
          fetchSuppliersForReport()
        ]).then(() => {
          updateReportStatisticsFromTables()
        })
              }

      // Ensure body scrolling is enabled
      document.body.style.overflow = "auto"
    })
  }
})

// Ensure the report section displays correctly
document.addEventListener("DOMContentLoaded", () => {
  // Fix for report navigation
  const reportLinks = document.querySelectorAll("a[onclick*=\"navigateTo('report'\"]")

  reportLinks.forEach((link) => {
    link.addEventListener(
      "click",
      (e) => {
        e.preventDefault()
        e.stopPropagation()

        // Show report section without scrolling
        const sections = document.querySelectorAll("section")
        sections.forEach((sec) => (sec.style.display = "none"))

        const reportSection = document.getElementById("report")
        if (reportSection) {
          reportSection.style.display = "block"

          // Make sure the tab container is visible and properly sized
          const tabContainer = reportSection.querySelector(".tab-container")
          if (tabContainer) {
            tabContainer.style.display = "flex"
            tabContainer.style.width = "100%"
          }

          // Update active state in sidebar
          document.querySelectorAll(".sidebar ul li a").forEach((menuLink) => {
            menuLink.classList.remove("active")
            if (menuLink.getAttribute("onclick")?.includes("report")) {
              menuLink.classList.add("active")
            }
          })

          // Update statistics without scrolling
          Promise.all([
            fetchMaterialsForReport(),
            fetchWarehouseForReport(),
            fetchSuppliersForReport()
          ]).then(() => {
            updateReportStatisticsFromTables()
          })
                  }

        // Ensure body scrolling is enabled
        document.body.style.overflow = "auto"

        return false
      },
      true,
    )
  })

  // Fix tab display on initial load
  const reportSection = document.getElementById("report")
  if (reportSection) {
    const tabContainer = reportSection.querySelector(".tab-container")
    if (tabContainer) {
      tabContainer.style.display = "flex"
      tabContainer.style.width = "100%"
    }
  }
})
async function fetchMaterialsForReport() {
  try {
    const res = await fetch("http://localhost:3000/api/material")
    const data = await res.json()
    materials = data // ‚úÖ G√°n v√†o bi·∫øn to√†n c·ª•c
    console.log("‚úÖ ƒê√£ load v·∫≠t t∆∞:", materials)
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y v·∫≠t t∆∞:", err)
    materials = []
  }
}

async function fetchWarehouseForReport() {
  try {
    const res = await fetch("http://localhost:3000/api/warehouse")
    const data = await res.json()
    warehouse = data.map((item, index) => ({
      code: item.MAVT || item.MAKH || `KHO${index + 1}`, // code d√πng ƒë·ªÉ t√¨m v·∫≠t t∆∞
      name: item.VITRI || `Kho ${index + 1}`,
      qty: item.SOLUONG || 0,
    }))
    console.log("‚úÖ D·ªØ li·ªáu kho sau khi chu·∫©n h√≥a:", warehouse)
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y kho:", err)
    warehouse = []
  }
}



async function fetchSuppliersForReport() {
  try {
    const res = await fetch("http://localhost:3000/api/suppliers")
    suppliers = await res.json()
  } catch (err) {
    console.error("L·ªói khi t·∫£i nh√† cung c·∫•p:", err)
    suppliers = []
  }
}
