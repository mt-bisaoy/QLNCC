const { poolPromise, sql } = require('../db');

module.exports = {
  // L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
  getAllOrders: async (req, res) => {
    try {
      const pool = await poolPromise;
      const result = await pool.request().query("SELECT * FROM DONHANG");
      res.json(result.recordset);
    } catch (err) {
      console.error("L·ªói khi l·∫•y ƒë∆°n h√†ng:", err);
      res.status(500).send("L·ªói server.");
    }
  },

  // Th√™m ƒë∆°n h√†ng
// Th√™m ƒë∆°n h√†ng
addOrder: async (req, res) => {
  const { MADH, NGAYDAT, TRANGTHAIDH, TONGTIEN, items } = req.body;
  const pool = await poolPromise;

  const transaction = new sql.Transaction(pool);
  try {
    await transaction.begin();

    // 1. Th√™m ƒë∆°n h√†ng
    const request = new sql.Request(transaction);
    await request
      .input('MADH', sql.VarChar, MADH)
      .input('NGAYDAT', sql.Date, NGAYDAT)
      .input('TRANGTHAIDH', sql.NVarChar, TRANGTHAIDH)
      .input('TONGTIEN', sql.Float, TONGTIEN)
      .query("INSERT INTO DONHANG (MADH, NGAYDAT, TRANGTHAIDH, TONGTIEN) VALUES (@MADH, @NGAYDAT, @TRANGTHAIDH, @TONGTIEN)");

    // 2. Th√™m t·ª´ng d√≤ng chi ti·∫øt (d√πng request m·ªõi m·ªói l·∫ßn)
    for (const item of items) {
      const itemRequest = new sql.Request(transaction); // üî• T·∫°o m·ªõi request m·ªói v√≤ng l·∫∑p
      await itemRequest
        .input('MADH', sql.VarChar, MADH)
        .input('MAVT', sql.VarChar, item.materialCode)
        .input('SLXUAT', sql.Int, item.quantity)
        .query(`INSERT INTO CHITIETHOADON (MADH, MAVT, SLXUAT) VALUES (@MADH, @MAVT, @SLXUAT)`);
    }

    await transaction.commit();
    res.status(201).send("‚úÖ ƒê√£ th√™m ƒë∆°n h√†ng k√®m chi ti·∫øt.");
  } catch (err) {
    await transaction.rollback();
    console.error("‚ùå L·ªói khi th√™m ƒë∆°n h√†ng:", err);
    res.status(500).send("L·ªói server.");
  }
},


  // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
// C·∫≠p nh·∫≠t ƒë∆°n h√†ng
// C·∫≠p nh·∫≠t ƒë∆°n h√†ng
updateOrder: async (req, res) => {
  const { id } = req.params;
  const { NGAYDAT, TRANGTHAIDH, TONGTIEN, items } = req.body;

  const pool = await poolPromise;
  const transaction = new sql.Transaction(pool);

  try {
    await transaction.begin();

    // 1. C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
    const updateRequest = new sql.Request(transaction);
    await updateRequest
      .input('MADH', sql.VarChar, id)
      .input('NGAYDAT', sql.Date, NGAYDAT)
      .input('TRANGTHAIDH', sql.NVarChar, TRANGTHAIDH)
      .input('TONGTIEN', sql.Float, TONGTIEN)
      .query(`
        UPDATE DONHANG 
        SET NGAYDAT = @NGAYDAT, TRANGTHAIDH = @TRANGTHAIDH, TONGTIEN = @TONGTIEN
        WHERE MADH = @MADH
      `);

    // 2. X√≥a chi ti·∫øt ƒë∆°n h√†ng c≈©
    const deleteRequest = new sql.Request(transaction);
    await deleteRequest
      .input('MADH', sql.VarChar, id)
      .query(`DELETE FROM CHITIETHOADON WHERE MADH = @MADH`);

    // 3. Th√™m l·∫°i c√°c chi ti·∫øt m·ªõi
    for (const item of items) {
      console.log("üõ†Ô∏è ƒêang th√™m v·∫≠t t∆∞:", item);
    
      if (!item.materialCode || isNaN(item.quantity)) {
        console.error("‚ùå D·ªØ li·ªáu v·∫≠t t∆∞ kh√¥ng h·ª£p l·ªá:", item);
        throw new Error("D·ªØ li·ªáu v·∫≠t t∆∞ kh√¥ng h·ª£p l·ªá");
      }

      const itemRequest = new sql.Request(transaction); // ‚úÖ m·ªói l·∫ßn t·∫°o m·ªõi
      await itemRequest
        .input('MADH', sql.VarChar, id)
        .input('MAVT', sql.VarChar, item.materialCode)
        .input('SLXUAT', sql.Int, item.quantity)
        .query(`
          INSERT INTO CHITIETHOADON (MADH, MAVT, SLXUAT)
          VALUES (@MADH, @MAVT, @SLXUAT)
        `);
    }

    await transaction.commit();
    res.send("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n h√†ng v√† chi ti·∫øt.");
  } catch (err) {
    await transaction.rollback();
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", err.message);
    res.status(500).send("L·ªói server.");
  }
}
,
  

  // X√≥a ƒë∆°n h√†ng
  deleteOrder: async (req, res) => {
    const { id } = req.params;
    try {
      const pool = await poolPromise;
      await pool.request()
        .input('MADH', sql.VarChar, id)
        .query("DELETE FROM DONHANG WHERE MADH = @MADH");
      res.send("ƒê√£ xo√° ƒë∆°n h√†ng.");
    } catch (err) {
      console.error("L·ªói khi xo√°:", err);
      res.status(500).send("L·ªói server.");
    }
  },

  getOrderById:  async (req, res) => {
  const { id } = req.params;
  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input("MaDH", id)
      .query("SELECT * FROM DONHANG WHERE MaDH = @MaDH");
    if (result.recordset.length === 0) {
      return res.status(404).send("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
    }
    res.json(result.recordset[0]);
  } catch (err) {
    res.status(500).send(err.message);
  }
}};


